import { Store } from 'redux';
import { ExtendedOptions } from './types';
type RehydrateOptions = Pick<ExtendedOptions, 'driver' | 'prefix' | 'unserialize' | 'persistWholeStore' | 'errorHandler'>;
type LoadAllOptions = Pick<ExtendedOptions, 'driver' | 'prefix' | 'unserialize'> & {
    rememberedKeys: string[];
};
export declare const loadAll: ({ rememberedKeys, driver, prefix, unserialize }: LoadAllOptions) => Promise<Record<string, any>>;
export declare const loadAllKeyed: ({ rememberedKeys, driver, prefix, unserialize }: LoadAllOptions) => Promise<Record<string, any>>;
export declare const rehydrate: (store: Store, rememberedKeys: string[], { prefix, driver, persistWholeStore, unserialize, errorHandler }: RehydrateOptions) => Promise<void>;
export {};
//# sourceMappingURL=rehydrate.d.ts.map