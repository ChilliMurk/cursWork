import { REMEMBER_REHYDRATED, REMEMBER_PERSISTED } from './action-types';
import { Driver, Options } from './types';
import { Action, StoreEnhancer, Reducer, ReducersMapObject, UnknownAction } from 'redux';
export * from './errors';
export * from './types';
declare const rememberReducer: <S = any, A extends Action = UnknownAction, PreloadedState = S>(reducer: Reducer<S, A, PreloadedState> | ReducersMapObject<S, A, PreloadedState>) => Reducer<S, A, PreloadedState>;
declare const rememberEnhancer: <Ext extends {} = {}, StateExt extends {} = {}>(driver: Driver, rememberedKeys: string[], { prefix, serialize, unserialize, persistThrottle, persistDebounce, persistWholeStore, initActionType, errorHandler }?: Partial<Options>) => StoreEnhancer<Ext, StateExt>;
export { rememberReducer, rememberEnhancer, REMEMBER_REHYDRATED, REMEMBER_PERSISTED };
//# sourceMappingURL=index.d.ts.map