function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
import { rehydrate } from "./rehydrate.mjs";
import { persist } from "./persist.mjs";
import { REMEMBER_PERSISTED } from "./action-types.mjs";
import { pick, throttle, debounce } from "./utils.mjs";
import isDeepEqual from "./is-deep-equal.mjs";
var init = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator(function* (store, rememberedKeys, _ref) {
    var prefix = _ref.prefix,
      driver = _ref.driver,
      serialize = _ref.serialize,
      unserialize = _ref.unserialize,
      persistThrottle = _ref.persistThrottle,
      persistDebounce = _ref.persistDebounce,
      persistWholeStore = _ref.persistWholeStore,
      errorHandler = _ref.errorHandler;
    yield rehydrate(store, rememberedKeys, {
      prefix: prefix,
      driver: driver,
      unserialize: unserialize,
      persistWholeStore: persistWholeStore,
      errorHandler: errorHandler
    });
    var oldState = {};
    var persistFunc = /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator(function* () {
        var state = pick(store.getState(), rememberedKeys);
        yield persist(state, oldState, {
          prefix: prefix,
          driver: driver,
          serialize: serialize,
          persistWholeStore: persistWholeStore,
          errorHandler: errorHandler
        });
        if (!isDeepEqual(state, oldState)) {
          store.dispatch({
            type: REMEMBER_PERSISTED,
            payload: state
          });
        }
        oldState = state;
      });
      return function persistFunc() {
        return _ref3.apply(this, arguments);
      };
    }();
    if (persistDebounce && persistDebounce > 0) {
      store.subscribe(debounce(persistFunc, persistDebounce));
    } else {
      store.subscribe(throttle(persistFunc, persistThrottle));
    }
  });
  return function init(_x, _x2, _x3) {
    return _ref2.apply(this, arguments);
  };
}();
export default init;
//# sourceMappingURL=init.mjs.map