"use strict";

exports.__esModule = true;
exports.throttle = exports.pick = exports.debounce = void 0;
var pick = exports.pick = function pick(src, keys) {
  if (src === null || typeof src !== 'object') {
    return {};
  }
  var index = -1;
  var dest = {};
  while (++index < keys.length) {
    var key = keys[index];
    if (src.hasOwnProperty(key)) {
      dest[key] = src[key];
    }
  }
  return dest;
};
var throttle = exports.throttle = function throttle(callback, msecs) {
  var nextCallNow = 0;
  var nextCallTimeout;
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    var now = +new Date();
    var timeLeft = (nextCallNow || now) - now;
    if (timeLeft <= 0 && !nextCallTimeout) {
      nextCallNow = now + msecs;
      callback.apply(void 0, args);
      return;
    }
    if (nextCallTimeout) {
      clearTimeout(nextCallTimeout);
      nextCallTimeout = null;
    }
    nextCallTimeout = setTimeout(function () {
      nextCallNow = +new Date() + msecs;
      callback.apply(void 0, args);
      clearTimeout(nextCallTimeout);
      nextCallTimeout = null;
    }, timeLeft);
  };
};
var debounce = exports.debounce = function debounce(callback, msecs) {
  var nextCallTimeout;
  return function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    clearTimeout(nextCallTimeout);
    nextCallTimeout = setTimeout(function () {
      callback.apply(void 0, args);
      nextCallTimeout = null;
    }, msecs);
  };
};
//# sourceMappingURL=utils.cjs.map