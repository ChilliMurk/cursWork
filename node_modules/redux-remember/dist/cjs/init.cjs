"use strict";

exports.__esModule = true;
exports["default"] = void 0;
var _rehydrate = require("./rehydrate.cjs");
var _persist = require("./persist.cjs");
var _actionTypes = require("./action-types.cjs");
var _utils = require("./utils.cjs");
var _isDeepEqual = _interopRequireDefault(require("./is-deep-equal.cjs"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
var init = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator(function* (store, rememberedKeys, _ref) {
    var prefix = _ref.prefix,
      driver = _ref.driver,
      serialize = _ref.serialize,
      unserialize = _ref.unserialize,
      persistThrottle = _ref.persistThrottle,
      persistDebounce = _ref.persistDebounce,
      persistWholeStore = _ref.persistWholeStore,
      errorHandler = _ref.errorHandler;
    yield (0, _rehydrate.rehydrate)(store, rememberedKeys, {
      prefix: prefix,
      driver: driver,
      unserialize: unserialize,
      persistWholeStore: persistWholeStore,
      errorHandler: errorHandler
    });
    var oldState = {};
    var persistFunc = /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator(function* () {
        var state = (0, _utils.pick)(store.getState(), rememberedKeys);
        yield (0, _persist.persist)(state, oldState, {
          prefix: prefix,
          driver: driver,
          serialize: serialize,
          persistWholeStore: persistWholeStore,
          errorHandler: errorHandler
        });
        if (!(0, _isDeepEqual["default"])(state, oldState)) {
          store.dispatch({
            type: _actionTypes.REMEMBER_PERSISTED,
            payload: state
          });
        }
        oldState = state;
      });
      return function persistFunc() {
        return _ref3.apply(this, arguments);
      };
    }();
    if (persistDebounce && persistDebounce > 0) {
      store.subscribe((0, _utils.debounce)(persistFunc, persistDebounce));
    } else {
      store.subscribe((0, _utils.throttle)(persistFunc, persistThrottle));
    }
  });
  return function init(_x, _x2, _x3) {
    return _ref2.apply(this, arguments);
  };
}();
var _default = exports["default"] = init;
//# sourceMappingURL=init.cjs.map