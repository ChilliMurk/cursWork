"use strict";

exports.__esModule = true;
exports["default"] = void 0;
function _createForOfIteratorHelperLoose(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (t) return (t = t.call(r)).next.bind(t); if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var o = 0; return function () { return o >= r.length ? { done: !0 } : { done: !1, value: r[o++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var getObjectType = function getObjectType(o) {
  var _Object$prototype$toS;
  return (_Object$prototype$toS = Object.prototype.toString.call(o).match(/\[object (.*)\]/)) == null ? void 0 : _Object$prototype$toS[1];
};
var isTypedArray = function isTypedArray(o) {
  return /^\[object (?:Float(?:32|64)|(?:Int|Uint)(?:8|16|32)|Uint8Clamped)Array\]$/.test(Object.prototype.toString.call(o));
};
var _isDeepEqual = function isDeepEqual(a, b) {
  if (a === b) {
    return true;
  }
  if (typeof a !== 'object' || typeof b !== 'object' || a === null || a === undefined || b === null || b === undefined) {
    return a !== a && b !== b;
  }
  if (a.constructor !== b.constructor) {
    return false;
  }
  if (a.constructor === RegExp) {
    return a.source === b.source && a.flags === b.flags;
  }
  if (Array.isArray(a)) {
    if (a.length !== b.length) {
      return false;
    }
    for (var i = a.length; i-- !== 0;) {
      if (!_isDeepEqual(a[i], b[i])) {
        return false;
      }
    }
    return true;
  }
  if (isTypedArray(a) && isTypedArray(b)) {
    if (a.byteLength !== b.byteLength) {
      return false;
    }
    for (var _i = a.byteLength; _i-- !== 0;) {
      if (!_isDeepEqual(a[_i], b[_i])) {
        return false;
      }
    }
    return true;
  }
  var aType = getObjectType(a);
  var bType = getObjectType(b);
  if (aType === 'DataView' && bType === 'DataView') {
    if (a.byteLength !== b.byteLength || a.byteOffset !== b.byteOffset) {
      return false;
    }
    return _isDeepEqual(a.buffer, b.buffer);
  }
  if (aType === 'ArrayBuffer' && bType === 'ArrayBuffer') {
    if (a.byteLength !== b.byteLength) {
      return false;
    }
    return _isDeepEqual(new Uint8Array(a), new Uint8Array(b));
  }
  if (aType === 'Map' && bType === 'Map') {
    if (a.size !== b.size) {
      return false;
    }
    for (var _iterator = _createForOfIteratorHelperLoose(a.entries()), _step; !(_step = _iterator()).done;) {
      var _step$value = _step.value,
        key = _step$value[0];
      if (!b.has(key)) {
        return false;
      }
    }
    for (var _iterator2 = _createForOfIteratorHelperLoose(a.entries()), _step2; !(_step2 = _iterator2()).done;) {
      var _step2$value = _step2.value,
        _key = _step2$value[0],
        value = _step2$value[1];
      if (!_isDeepEqual(value, b.get(_key))) {
        return false;
      }
    }
    return true;
  }
  if (aType === 'Set' && bType === 'Set') {
    if (a.size !== b.size) {
      return false;
    }
    for (var _iterator3 = _createForOfIteratorHelperLoose(a.entries()), _step3; !(_step3 = _iterator3()).done;) {
      var _step3$value = _step3.value,
        _key2 = _step3$value[0];
      if (!b.has(_key2)) {
        return false;
      }
    }
    return true;
  }
  if (aType === 'Date' && bType === 'Date') {
    return +a === +b;
  }
  var aKeys = Object.keys(a);
  if (aKeys.length !== Object.keys(b).length) {
    return false;
  }
  for (var _i2 = aKeys.length; _i2-- !== 0;) {
    if (!Object.prototype.hasOwnProperty.call(b, aKeys[_i2])) {
      return false;
    }
  }
  for (var _i3 = aKeys.length; _i3-- !== 0;) {
    var _key3 = aKeys[_i3];
    if (!_isDeepEqual(a[_key3], b[_key3])) {
      return false;
    }
  }
  if (aType !== 'Object' && bType !== 'Object') {
    return a === b;
  }
  return true;
};
var _default = exports["default"] = _isDeepEqual;
//# sourceMappingURL=is-deep-equal.cjs.map